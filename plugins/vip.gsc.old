//Created by Cobra
//Edited by Dunciboy

init(l) {
	level.shaders = strTok("ui_host;line_vertical;nightvision_overlay_goggles;hud_arrow_left",";");
	for(i=0;i<level.shaders.size;i++)
		precacheShader(level.shaders[i]);
	level.map_vips["guid"] = [];
	level.menuoption["name"] = [];	
	precacheItem("p90_mp");
	precacheItem("m4_mp");
	precacheItem("remington700_mp");
	precacheItem("mp5_mp");
	precacheItem("brick_blaster_mp");
	precacheItem("m40a3_mp");
	precacheItem("g3_mp");
	precacheItem("deserteagle_mp");	
	level.dist = loadfx( "fire/tank_fire_engine" );
	level.fx["dust"] = loadFx( "props/crateexp_dust" );
	//---------------------ViPs------------------------
	 addVip("f6e389d4","Bob");
     addVip("7c20179a","Hammy");
     addVip("4a22c8f0","Premium");
     addVip("7f9bc1cd","Razor711");
     addVip("3fcff8ca","pandachocolate");
     addVip("c8a549cb","NASHI");
     addVip("5da8b38b","recoil");
     addVip("ff63cce3","PaNDA");
     addVip("bcd7a480","Dubz");
     addVip("2efeb5d2","Alpaca");
     addVip("b802e53f","Nick.");
     addVip("92f85ab3","PheTzZ");
     addVip("3d598a40","OhhCollet");
     addVip("106140ef","Floppy");
     addvip("11765a9b","NaRDi99");
     addVip("b4e66Thu","caps");
     addVip("46385871","iausie");
     addVip("b5ddba19","hawkz");
     addVip("f9a8824a","sleepy");
     addVip("2a8ba419","akJOSH");
     addVip("83cd0aa2","frosty");
     addVip("8047c9d5","frosty");
     addVip("190476ea","Rev");
     addVip("5ac1cfcc","Nick");
     addVip("71eb4130","Bulgy");
     addVip("870baf15","ImSorry");
     addVip("f81a3d02","emty");
     addVip("e3459412","Kexzy");
     addVip("8399e3bc","AUSSIE");
	 addVip("d183d067","AmaZeD");
	addVip("b7cdf8d3","Vibe");
	 addVip("cd4224d9","Mayo");

	//-------------------------------------------------
	
	//------------------Menu options-------------------
	//         Displayname    function
	addSubMenu("^7Pick a weapon","weapon");
		addMenuOption("^7R700 Sniper Rifle","weapon",plugins\r700::r700);
		addMenuOption("^3P90","weapon",plugins\p90::p90);
		addMenuOption("^7Mp5","weapon",plugins\mp5::mp5);
		addMenuOption("^3Brick gun","weapon",plugins\brickgun::brickgun);
		addMenuOption("^7G3","weapon",plugins\g3::g3);
		addMenuOption("^3Desert eagle","weapon",plugins\deagle::deagle);
	addMenuOption("^3Toggle Laser","main",plugins\laser::laser);
	addMenuOption("^7Toggle Dog","main",plugins\dog::dog);
	addSubMenu("^3FOVScale Selector","fov");
		addMenuOption("^7FOVScale x1.0","fov",plugins\fov::fov1);
		addMenuOption("^3FOVScale x1.2","fov",plugins\fov::fov12);
		addMenuOption("^7FOVScale x1.4","fov",plugins\fov::fov14);
		addMenuOption("^3FOVScale x1.6","fov",plugins\fov::fov16);
		addMenuOption("^7FOVScale x1.8","fov",plugins\fov::fov18);
		addMenuOption("^3FOVScale x2.0","fov",plugins\fov::fov2);
		
	//-------------------------------------------------
	thread onPlayerConnected();
}
onPlayerConnected() {
	for(;;) {
		level waittill("connected",player);
		if(isVip(player)) {
			if(!isDefined(player.pers["wlced"])) { 
				player.pers["wlced"] = true;
				iPrintln("^3[^7VIP^3] ^7" + player.name + "^7has entered the server.");
			}
			player braxi\_common::clientCmd("bind L openscriptmenu y vipmenu");
			player thread OnMenuResponse();
		}
	}
}
addVip(guid,name) {
	level.map_vips["guid"][level.map_vips["guid"].size] = guid;
	level.map_vips["name"][level.map_vips["guid"].size] = name;
}
isVip(player) {
	for(i=0;i<level.map_vips["guid"].size;i++)
		if(level.map_vips["guid"][i] == getSubStr(player getGuid(),24,32))
			return true;
	return false;
}
OnMenuResponse() {
	self endon("disconnect");
	self.invipmenu = false;
	for(;;wait .05) {
		self waittill("menuresponse", menu, response);
		if(!self.invipmenu && response == "vipmenu") {
			self.invipmenu = true;
			for(;self.sessionstate == "playing" && !self isOnGround();wait .05){}
			self thread VipMenu();
			self disableWeapons();
			self freezeControls(true);			
			self allowSpectateTeam( "allies", false );
			self allowSpectateTeam( "axis", false );
			self allowSpectateTeam( "none", false );			
		}
		else if(self.invipmenu && response == "vipmenu") self endMenu();	
	}
}
endMenu() {
	self notify("close_vip_menu");
	for(i=0;i<self.vipmenu.size;i++) self.vipmenu[i] thread FadeOut(1,true,"right");
	self thread Blur(2,0);
	self.vipmenubg thread FadeOut(1);
	self.invipmenu = false;
	self enableWeapons();
	self freezeControls(false);
	self allowSpectateTeam( "allies", true );
	self allowSpectateTeam( "axis", true );
	self allowSpectateTeam( "none", true );
}
addMenuOption(name,menu,script) {
	if(!isDefined(level.menuoption["name"][menu])) level.menuoption["name"][menu] = [];
	level.menuoption["name"][menu][level.menuoption["name"][menu].size] = name;
	level.menuoption["script"][menu][level.menuoption["name"][menu].size] = script;
}
addSubMenu(displayname,name) {
	addMenuOption(displayname,"main",name);
}
GetMenuStuct(menu) {
	itemlist = "";
	for(i=0;i<level.menuoption["name"][menu].size;i++) itemlist = itemlist + level.menuoption["name"][menu][i] + "\n";
	return itemlist;
}
VipMenu() {
	self endon("close_vip_menu");
	self endon("disconnect");
	self thread Blur(0,2);
	submenu = "main";
	self.vipmenu[0] = addTextHud( self, -200, 0, .6, "left", "top", "right",0, 101 );	
	self.vipmenu[0] setShader("nightvision_overlay_goggles", 400, 650);
	self.vipmenu[0] thread FadeIn(.5,true,"right");
	self.vipmenu[1] = addTextHud( self, -200, 0, .5, "left", "top", "right", 0, 101 );	
	self.vipmenu[1] setShader("black", 400, 650);	
	self.vipmenu[1] thread FadeIn(.5,true,"right");
	self.vipmenu[2] = addTextHud( self, -200, 89, .5, "left", "top", "right", 0, 102 );		
	self.vipmenu[2] setShader("line_vertical", 600, 22);
	self.vipmenu[2] thread FadeIn(.5,true,"right");	
	self.vipmenu[3] = addTextHud( self, -190, 93, 1, "left", "top", "right", 0, 104 );		
	self.vipmenu[3] setShader("ui_host", 14, 14);			
	self.vipmenu[3] thread FadeIn(.5,true,"right");
	self.vipmenu[4] = addTextHud( self, -165, 100, 1, "left", "middle", "right", 1.4, 103 );
	self.vipmenu[4] settext(GetMenuStuct(submenu));
	self.vipmenu[4] thread FadeIn(.5,true,"right");
	self.vipmenu[5] = addTextHud( self, -170, 400, 1, "left", "middle", "right" ,1.4, 103 );
	self.vipmenu[5] settext("^7Select: ^3[Right or Left Mouse]^7\nUse: ^3[[{+activate}]]^7\nLeave: ^3[[{+melee}]]");	
	self.vipmenu[5] thread FadeIn(.5,true,"right");
	self.vipmenubg = addTextHud( self, 0, 0, .5, "left", "top", undefined , 0, 101 );	
	self.vipmenubg.horzAlign = "fullscreen";
	self.vipmenubg.vertAlign = "fullscreen";
	self.vipmenubg setShader("black", 640, 480);
	self.vipmenubg thread FadeIn(.2);
	for(selected=0;!self meleebuttonpressed();wait .05) {
		if(self Attackbuttonpressed()) {
			self playLocalSound( "mouse_over" );
			if(selected == level.menuoption["name"][submenu].size-1) selected = 0;
			else selected++;	
		}
		if(self adsbuttonpressed()) {
			self braxi\_common::clientCmd("-speed_throw");
			self playLocalSound( "mouse_over" );
			if(selected == 0) selected = level.menuoption["name"][submenu].size-1;
			else selected--;
		}
		if(self adsbuttonpressed() || self Attackbuttonpressed()) {
			if(submenu == "main") {
				self.vipmenu[2] moveOverTime( .05 );
				self.vipmenu[2].y = 89 + (16.8 * selected);	
				self.vipmenu[3] moveOverTime( .05 );
				self.vipmenu[3].y = 93 + (16.8 * selected);	
			}
			else {
				self.vipmenu[7] moveOverTime( .05 );
				self.vipmenu[7].y = 10 + self.vipmenu[6].y + (16.8 * selected);	
			}
		}
		if((self adsbuttonpressed() || self Attackbuttonpressed()) && !self useButtonPressed()) wait .15;
		if(self useButtonPressed()) {
			if(!isString(level.menuoption["script"][submenu][selected+1])) {
				self thread [[level.menuoption["script"][submenu][selected+1]]]();
				self thread endMenu();
				self notify("close_vip_menu");
			}
			else {
				abstand = (16.8 * selected);
				submenu = level.menuoption["script"][submenu][selected+1];
				self.vipmenu[6] = addTextHud( self, -430, abstand + 50, .5, "left", "top", "right", 0, 101 );	
				self.vipmenu[6] setShader("black", 200, 300);	
				self.vipmenu[6] thread FadeIn(.5,true,"left");
				self.vipmenu[7] = addTextHud( self, -430, abstand + 60, .5, "left", "top", "right", 0, 102 );		
				self.vipmenu[7] setShader("line_vertical", 200, 22);
				self.vipmenu[7] thread FadeIn(.5,true,"left");
				self.vipmenu[8] = addTextHud( self, -219, 93 + (16.8 * selected), 1, "left", "top", "right", 0, 104 );		
				self.vipmenu[8] setShader("hud_arrow_left", 14, 14);			
				self.vipmenu[8] thread FadeIn(.5,true,"left");
				self.vipmenu[9] = addTextHud( self, -420, abstand + 71, 1, "left", "middle", "right", 1.4, 103 );
				self.vipmenu[9] settext(GetMenuStuct(submenu));
				self.vipmenu[9] thread FadeIn(.5,true,"left");
				selected = 0;
				wait .2;
			}
		}
	}
	self thread endMenu();
}
addTextHud( who, x, y, alpha, alignX, alignY, vert, fontScale, sort ) { //stealed braxis function like a boss xD
	if( isPlayer( who ) ) hud = newClientHudElem( who );
	else hud = newHudElem();

	hud.x = x;
	hud.y = y;
	hud.alpha = alpha;
	hud.sort = sort;
	hud.alignX = alignX;
	hud.alignY = alignY;
	if(isdefined(vert))
		hud.horzAlign = vert;
	if(fontScale != 0)
		hud.fontScale = fontScale;
	return hud;
}
FadeOut(time,slide,dir) {	
	if(!isDefined(self)) return;
	if(isdefined(slide) && slide) {
		self MoveOverTime(0.2);
		if(isDefined(dir) && dir == "right") self.x+=600;
		else self.x-=600;
	}
	self fadeovertime(time);
	self.alpha = 0;
	wait time;
	if(isDefined(self)) self destroy();
}
FadeIn(time,slide,dir) {
	if(!isDefined(self)) return;
	if(isdefined(slide) && slide) {
		if(isDefined(dir) && dir == "right") self.x+=600;
		else self.x-=600;	
		self moveOverTime( .2 );
		if(isDefined(dir) && dir == "right") self.x-=600;
		else self.x+=600;
	}
	alpha = self.alpha;
	self.alpha = 0;
	self fadeovertime(time);
	self.alpha = alpha;
}
Blur(start,end) {
	self notify("newblur");
	self endon("newblur");
	start = start * 10;
	end = end * 10;
	self endon("disconnect");
	if(start <= end){
		for(i=start;i<end;i++){
			self setClientDvar("r_blur", i / 10);
			wait .05;
		}
	}
	else for(i=start;i>=end;i--){
		self setClientDvar("r_blur", i / 10);
		wait .05;
	}
}
lives()
 {
	while( 1 )
	{
		level waittill( "player_spawn", player );
	{
           	 if( !isDefined( self.pers["got3lives"] ) ) 
             {
                self braxi\_mod::giveLife();
                self.pers["gotalives"] = true;
             }
	}
	}
}
